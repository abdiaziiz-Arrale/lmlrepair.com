generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Customer {
  customer_id      Int    @id @default(autoincrement())
  customer_name    String
  customer_email   String @unique
  customer_phone   String @unique
  customer_address String
}

model Service {
  service_id    Int        @id @default(autoincrement())
  service_name  String
  service_desc  String
  service_image String
  service_type  String
  Category      Category[]
}

model Category {
  category_id    Int     @id @default(autoincrement())
  type_Of_Repair String
  raw            Float
  tax            Float
  shipping       Float
  timeFrame      String
  service_id     Int
  labour         Int     @default(100)
  Service        Service @relation(fields: [service_id], references: [service_id])

  @@index([service_id], map: "Category_service_id_fkey")
}

model Brand {
  brand_id    Int      @id @default(autoincrement())
  brand_name  String
  brand_image String
  brand_desc  String
  Series      Series[]
}

model Products {
  product_id              Int                  @id @default(autoincrement())
  product_name            String
  product_image           String
  product_desc            String
  raw                     Float
  tax                     Float
  shipping                Float
  markup                  Float
  product_sub_category_id Int
  ProductSubCategories    ProductSubCategories @relation(fields: [product_sub_category_id], references: [product_sub_category_id])

  @@index([product_sub_category_id], map: "idx_product_sub_category_id")
}

model Series {
  series_id    Int     @id @default(autoincrement())
  series_name  String
  series_image String
  series_desc  String
  brand_id     Int
  Model        Model[]
  Brand        Brand   @relation(fields: [brand_id], references: [brand_id])

  @@index([brand_id], map: "Series_brand_id_fkey")
}

model Model {
  model_id      Int             @id @default(autoincrement())
  model_name    String
  model_image   String
  series_id     Int
  Series        Series          @relation(fields: [series_id], references: [series_id])
  ModelCategory ModelCategory[]

  @@index([series_id], map: "Model_series_id_fkey")
}

model ModelCategory {
  modelCategory_id Int    @id @default(autoincrement())
  type_of_repair   String
  model_id         Int
  labour           Int    @default(100)
  Model            Model  @relation(fields: [model_id], references: [model_id])

  @@index([model_id], map: "ModelCategory_model_id_fkey")
}

model Staff {
  staff_id      Int     @id @default(autoincrement())
  staff_name    String
  mobile_number String
  email         String  @unique
  location      String
  role          String  @default("admin")
  password      String  @db.VarChar(255)
  job_title     String  @default("technician")
  leaves        Leave[]
}

model Leave {
  leave_id    Int    @id @default(autoincrement())
  start_date  String
  end_date    String
  type        String
  description String
  status      String @default("pending")
  staff_id    Int
  staff       Staff  @relation(fields: [staff_id], references: [staff_id])

  @@index([staff_id])
}

model InventoryItem {
  inventoryItemId    Int                @id @default(autoincrement())
  name               String
  description        String?
  itemsCategoryId    Int
  itemsSubCategoryId Int?
  vendorId           Int?
  brandId            Int
  image              String
  internalTransfers  InternalTransfer[]
  inventoryAge       InventoryAge[]
  itemsCategory      ItemsCategory      @relation(fields: [itemsCategoryId], references: [itemsCategoryId])
  itemsSubCategory   ItemsSubCategory?  @relation(fields: [itemsSubCategoryId], references: [itemsSubCategoryId])
  vendor             Vendor?            @relation(fields: [vendorId], references: [vendorId])
  itemReturns        ItemReturn[]
  lowStockAlerts     LowStockAlert[]
  sales              Sale[]
  variations         Variation[]

  @@index([itemsCategoryId], map: "InventoryItem_itemsCategoryId_fkey")
  @@index([itemsSubCategoryId], map: "InventoryItem_itemsSubCategoryId_fkey")
  @@index([vendorId], map: "InventoryItem_vendorId_fkey")
  @@index([brandId], map: "InventoryItemBrand_brandId_fkey")
}

model ItemsCategory {
  itemsCategoryId Int                @id @default(autoincrement())
  name            String
  image           String
  InventoryItem   InventoryItem[]
  subCategories   ItemsSubCategory[]
}

model ItemsSubCategory {
  itemsSubCategoryId Int             @id @default(autoincrement())
  name               String
  categoryId         Int
  InventoryItem      InventoryItem[]
  category           ItemsCategory   @relation(fields: [categoryId], references: [itemsCategoryId])

  @@index([categoryId], map: "ItemsSubCategory_categoryId_fkey")
}

model Vendor {
  vendorId      Int             @id @default(autoincrement())
  name          String
  InventoryItem InventoryItem[]
}

model Location {
  locationId    Int                @id @default(autoincrement())
  name          String             @unique
  description   String?
  transfersFrom InternalTransfer[] @relation("fromLocation")
  transfersTo   InternalTransfer[] @relation("toLocation")
  stockReturns  ItemReturn[]
}

model Variation {
  variationId      Int                @id @default(autoincrement())
  sku              String             @unique
  inventoryItemId  Int
  image            String?
  name             String
  raw              Float              @default(10)
  shipping         Float              @default(5)
  tax              Float              @default(10.25)
  inventoryItem    InventoryItem      @relation(fields: [inventoryItemId], references: [inventoryItemId])
  InternalTransfer InternalTransfer[]
  ItemReturn       ItemReturn[]

  @@index([inventoryItemId])
}

model InternalTransfer {
  internalTransferId Int           @id @default(autoincrement())
  inventoryItemId    Int
  variationId        Int
  quantity           Int
  fromLocationId     Int
  toLocationId       Int
  transferDate       DateTime      @default(now())
  status             String
  fromLocation       Location      @relation("fromLocation", fields: [fromLocationId], references: [locationId])
  inventoryItem      InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
  toLocation         Location      @relation("toLocation", fields: [toLocationId], references: [locationId])
  variation          Variation     @relation(fields: [variationId], references: [variationId])

  @@index([fromLocationId], map: "InternalTransfer_fromLocationId_fkey")
  @@index([inventoryItemId], map: "InternalTransfer_inventoryItemId_fkey")
  @@index([toLocationId], map: "InternalTransfer_toLocationId_fkey")
  @@index([variationId], map: "InternalTransfer_variationId_fkey")
}

model Sale {
  saleId          Int            @id @default(autoincrement())
  inventoryItemId Int
  quantity        Int
  revenue         Float
  saleDate        DateTime
  InventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [inventoryItemId])

  @@index([inventoryItemId], map: "Sale_inventoryItemId_fkey")
}

model InventoryAge {
  inventoryAgeId  Int            @id @default(autoincrement())
  inventoryItemId Int
  arrivalDate     DateTime
  InventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [inventoryItemId])

  @@index([inventoryItemId], map: "InventoryAge_inventoryItemId_fkey")
}

model LowStockAlert {
  lowStockAlertId Int            @id @default(autoincrement())
  inventoryItemId Int
  threshold       Int
  InventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [inventoryItemId])

  @@index([inventoryItemId], map: "LowStockAlert_inventoryItemId_fkey")
}

model ProductCategories {
  product_category_id    Int                    @id @default(autoincrement())
  product_category_name  String
  product_category_desc  String
  product_category_image String
  ProductSubCategories   ProductSubCategories[]
}

model ProductSubCategories {
  product_sub_category_id    Int               @id @default(autoincrement())
  product_sub_category_name  String
  product_sub_category_desc  String
  product_sub_category_image String
  product_category_id        Int
  ProductCategories          ProductCategories @relation(fields: [product_category_id], references: [product_category_id])
  Products                   Products[]

  @@index([product_category_id], map: "idx_product_category_id")
}

model ItemReturn {
  stockReturnId   Int           @id @default(autoincrement())
  inventoryItemId Int
  locationId      Int
  variationId     Int
  reason          String
  returnedAt      DateTime
  status          String
  request         String
  result          String
  returningParty  String        @default("Customer")
  quantity        Int           @default(1)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
  location        Location      @relation(fields: [locationId], references: [locationId])
  variation       Variation     @relation(fields: [variationId], references: [variationId])
  Comment         Comment[]

  @@index([inventoryItemId], map: "ItemReturn_inventoryItemId_fkey")
  @@index([locationId], map: "ItemReturn_locationId_fkey")
  @@index([variationId], map: "InternalTransfer_variationId_fkey")
}

model Comment {
  commentId     Int        @id @default(autoincrement())
  stockReturnId Int
  text          String
  createdAt     DateTime   @default(now())
  stockReturn   ItemReturn @relation(fields: [stockReturnId], references: [stockReturnId])

  @@index([stockReturnId], map: "Comment_stockReturnId_fkey")
}

model BlogCategory {
  blogCategoryId Int    @id @default(autoincrement())
  name           String @unique
}

model InventoryItemBrand {
  brandInventoryId   Int    @id @default(autoincrement())
  brandInventoryName String
  description        String
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String
  content         String
  authorId        Int
  blogCategoryId  Int
  tag             String
  published       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime?

  @@index([blogCategoryId], map: "Posts_blogCategoryId_fkey")
}

model VariantRepair {
  variant_repair_id Int @id @default(autoincrement())
  modelCategory_id  Int
  variationId       Int

  @@index([modelCategory_id], map: "VariantRepair_modelCategory_id_fkey")
  @@index([variationId], map: "VariantRepair_variationId_fkey")
}

model VariationOnLocation {
  variationOnLocationId Int      @id @default(autoincrement())
  variationId           Int
  locationId            Int
  stock                 Int
  date                  DateTime @default(now())

  @@unique([variationId, locationId])
  @@index([locationId], map: "VariationOnLocation_locationId_fkey")
  @@index([variationId], map: "VariationOnLocation_variationId_fkey")
}
